{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/Slutprojekt/Final-project/frontend/src/components/Game.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rooms } from '../reducers/rooms';\nimport { loader } from '../reducers/loader';\nexport const Game = () => {\n  const username = useSelector(store => store.rooms.username);\n  const room = useSelector(store => store.rooms); // We'll use this variable to check if things are loading or not.\n\n  const isLoading = useSelector(store => store.loader.isLoading);\n  const dispatch = useDispatch();\n  const URL = \"mongodb://localhost/finalProject\";\n  const startGameFetchInfo = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: username\n    })\n  }; // This function starts the game, by doing the first fetch from the API.\n\n  const startGame = () => {\n    dispatch(loader.actions.setLoading(true)); // Fetcha, och sedan skicka in responsen (data) till setGameState. Typ.\n\n    fetch(START_URL, startGameFetchInfo).then(response => response.json()).then(data => {\n      // Pass \"data\" (the response from the API containing the coordinates, direction, etc) to the Game State.\n      dispatch(rooms.actions.setGameState(data));\n      dispatch(loader.actions.setLoading(false));\n    });\n  }; // This function is called on each click of a \"Direction\" button – i.e. the buttons in each action box with North, East, West or South.\n\n\n  const continueGame = direction => {\n    dispatch(loader.actions.setLoading(true));\n    fetch(ACTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        type: \"move\",\n        direction: direction\n      })\n    }).then(response => response.json()).then(data => {\n      dispatch(rooms.actions.setGameState(data));\n      dispatch(loader.actions.setLoading(false));\n    });\n  }; // This will make it run only the first time the component mounts. \n  // \"You can use the useEffect hook to run a function when the component has been mounted. By giving it an empty array as second argument it will only be run after the initial render.\"\n\n\n  useEffect(() => {\n    startGame();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, room.gameState.coordinates), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"spacer-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"\\u25C6\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"\\\"\", room.gameState.description, \"\\\"\")), room.gameState.actions.length === 1 ? /*#__PURE__*/React.createElement(\"img\", {\n    className: \"image-arrow\",\n    src: arrow_one,\n    alt: \"arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }) : null, room.gameState.actions.length === 2 ? /*#__PURE__*/React.createElement(\"img\", {\n    className: \"image-arrow\",\n    src: arrow_split,\n    alt: \"arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }) : null, room.gameState.actions.length === 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"gameover-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"You completed the labyrinth!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 78\n    }\n  }, \"> Restart game\")) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, room.gameState.actions.map((action, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box-action\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"\\\"\", action.description, \"\\\"\"), /*#__PURE__*/React.createElement(\"button\", {\n    key: action.direction\n    /* If the game is loading (using the global \"isLoading\" variable), set disabled to true to prevent multiple clicks.*/\n    ,\n    disabled: isLoading\n    /* When clicking button, run the \"continueGame\" function, and pass the direction as an argument. */\n    ,\n    onClick: () => continueGame(action.direction),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"> \", action.direction)))));\n};","map":{"version":3,"sources":["/Users/apple/Desktop/Slutprojekt/Final-project/frontend/src/components/Game.js"],"names":["React","useEffect","useDispatch","useSelector","rooms","loader","Game","username","store","room","isLoading","dispatch","URL","startGameFetchInfo","method","headers","body","JSON","stringify","startGame","actions","setLoading","fetch","START_URL","then","response","json","data","setGameState","continueGame","direction","ACTION_URL","type","gameState","coordinates","description","length","arrow_one","arrow_split","window","location","reload","map","action","index"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { rooms } from '../reducers/rooms'\nimport { loader } from '../reducers/loader'\n\n\nexport const Game = () => {\n  const username = useSelector(store => store.rooms.username)\n  const room = useSelector(store => store.rooms)\n  // We'll use this variable to check if things are loading or not.\n  const isLoading = useSelector(store => store.loader.isLoading)\n  const dispatch = useDispatch();\n\n  const URL = \"mongodb://localhost/finalProject\";\n  \n\n  const startGameFetchInfo = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      username: username\n    })\n  }\n\n  // This function starts the game, by doing the first fetch from the API.\n  const startGame = () => {\n    dispatch(loader.actions.setLoading(true))\n    // Fetcha, och sedan skicka in responsen (data) till setGameState. Typ.\n    fetch(START_URL, startGameFetchInfo)\n      .then(response => response.json())\n      .then(data => {\n        // Pass \"data\" (the response from the API containing the coordinates, direction, etc) to the Game State.\n        dispatch(rooms.actions.setGameState(data))\n        dispatch(loader.actions.setLoading(false))\n      })\n  }\n\n  // This function is called on each click of a \"Direction\" button – i.e. the buttons in each action box with North, East, West or South.\n  const continueGame = (direction) => {\n    dispatch(loader.actions.setLoading(true))\n    fetch(ACTION_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        username: username,\n        type: \"move\",\n        direction: direction\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        dispatch(rooms.actions.setGameState(data))\n        dispatch(loader.actions.setLoading(false))\n      })\n  }\n\n  // This will make it run only the first time the component mounts. \n  // \"You can use the useEffect hook to run a function when the component has been mounted. By giving it an empty array as second argument it will only be run after the initial render.\"\n  useEffect(() => {\n    startGame();\n  }, []);\n\n  return (\n    <>\n      <div className=\"box-description\">\n        <p>{room.gameState.coordinates}</p>\n        <p className=\"spacer-description\">◆</p>\n        <p>\"{room.gameState.description}\"</p>\n      </div>\n\n      {/* Logic to display either one arrow, two arrows, or a \"Game completed\" text */}\n      {\n        (room.gameState.actions.length === 1)\n          ? <img className=\"image-arrow\" src={arrow_one} alt=\"arrow\" />\n          : null\n      }\n      {\n        (room.gameState.actions.length === 2)\n          ? <img className=\"image-arrow\" src={arrow_split} alt=\"arrow\" />\n          : null\n      }\n      {\n        (room.gameState.actions.length === 0)\n          ? <><h2 className=\"gameover-text\">You completed the labyrinth!</h2><button onClick={() => window.location.reload()}>&gt; Restart game</button></>\n          : null\n      }\n\n      <div className=\"container-actions\">\n        {/* // For every action that's possible, push out a \"box-action\" box – the box containing an action description and direction. */}\n        {room.gameState.actions.map((action, index) =>\n          <div className=\"box-action\">\n            <p>\"{action.description}\"</p>\n            <button\n              key={action.direction}\n              /* If the game is loading (using the global \"isLoading\" variable), set disabled to true to prevent multiple clicks.*/\n              disabled={isLoading}\n              /* When clicking button, run the \"continueGame\" function, and pass the direction as an argument. */\n              onClick={() => continueGame(action.direction)}\n            >\n              {/* &gt; (gt = greater than) is the HTML entity for printing a \">\" character, since the buttons have one of those. */}\n              &gt; {action.direction}\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}